import 'package:dio/dio.dart';
import 'package:flight_booking_app/src/features/booking_flight/data/data_source/flight_data_source.dart';
import 'package:flight_booking_app/src/features/booking_flight/data/repositories/flights_repository_impl.dart';
import 'package:flight_booking_app/src/features/booking_flight/domain/use_cases/get_flights_use_case.dart';
import 'package:flutter/foundation.dart';
import 'package:get_it/get_it.dart';
import 'package:pretty_dio_logger/pretty_dio_logger.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'core/constants/api_constants.dart';
import 'features/booking_flight/domain/repositories/flights_repository.dart';

final locator = GetIt.I;

Future<void> initServiceLocator() async {
  final SharedPreferences preferences = await SharedPreferences.getInstance();
  locator.registerLazySingleton<SharedPreferences>(() => preferences);
  if (kDebugMode) {
    locator.registerLazySingleton<PrettyDioLogger>(() => PrettyDioLogger());
    locator.registerLazySingleton<Dio>(
      () => Dio(
        BaseOptions(
          baseUrl: ApiConstants.baseUrl,
          contentType: 'application/json',
        ),
      )..interceptors.addAll([locator<PrettyDioLogger>()]),
    );
  } else {
    locator.registerLazySingleton<Dio>(
      () => Dio(
        BaseOptions(
          baseUrl: ApiConstants.baseUrl,
          contentType: 'application/json',
        ),
      ),
    );
  }
  locator.registerLazySingleton<FlightDataSource>(
    () => FlightDataSourceImpl(dio: locator<Dio>()),
  );
  locator.registerLazySingleton<FlightsRepository>(
    () => FlightsRepositoryImpl(dataSource: locator<FlightDataSourceImpl>()),
  );
  locator.registerLazySingleton<GetFlightsUseCase>(
    () => GetFlightsUseCase(repository: locator<FlightsRepositoryImpl>()),
  );
}
